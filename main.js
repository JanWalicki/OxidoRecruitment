import OpenAI from "openai";
import fs from 'fs';
import dotenv from 'dotenv';
dotenv.config();

if (!process.env.OPENAI_OXIDO_API_KEY) {
    throw new Error("OPENAI_OXIDO_API_KEY is not defined in the environment variables.");
}

const openai = new OpenAI({
    apiKey: process.env.OPENAI_OXIDO_API_KEY,
});


/**
 * Generates HTML content from the provided article text by calling the OpenAI API.
 * The function uses prompts to guide the API in creating structured HTML, including
 * tags for titles, paragraphs, and image placeholders.
 * 
 * @param {string} articleText - The text of the article to convert into HTML.
 * @returns {Promise<string>} - The generated HTML content as a string.
 * @throws Will throw an error if the OpenAI API call fails.
 */
async function generateHtmlFromArticle(articleText)
{
    const systemPrompt = 
    `You are an AI assistant tasked with generating structured HTML code for articles, incorporating placeholders for images and adhering to specific formatting guidelines.
        Your output should only include content between <body> and </body> tags.

        Formatting Instructions:

        1. Structure Content:
        - Use appropriate HTML tags for clear hierarchy:
            - <h1> for the main title.
            - <h2> for primary sections, and <h3> for subsections.
            - <p> for paragraphs, <ul> or <ol> for lists, and <blockquote> for quotes.
            - Use <strong> and <em> for emphasis where appropriate.

        2. Image Placeholders:
        - Insert image placeholders within relevant sections using:
            <img src="image_placeholder.jpg" alt="...">.
        - Alt text: Provide detailed descriptions that will guide an AI image generator to create relevant images.
        - **Images must be placed only above paragraphs**. **Do not place images above headings, titles, or directly beside them**. 
        - **Images should not be placed next to small or short paragraphs**, as this disrupts the flow of text. Instead, ensure images are placed above larger, more substantial paragraphs to maintain visual and textual balance.

        3. Article Structure:
        - Wrap the entire article content in <article> tags.
        - Always use classes for styling:
            - "title" for the main title.
            - "article-image" for image placeholders.
            - "article" for the article wrapper.
            - "article-paragraph" for paragraphs.
            - "subtitle" for section/subsection titles.
        - If the author is mentioned, include the author's name with the class "author" at the end.

        4. Restrictions:
        - Exclude <html>, <head>, or <body> tags. Only include content between <body> and </body>.
        - Do not include CSS, JavaScript, or any other external content.

        Ensure the HTML is clean, well-structured, and optimized for content-heavy articles, following these guidelines strictly.`;

    
    const userPrompt = 
    `Generate HTML content for an article. Use appropriate HTML structure with sections and subsections. 
     Include descriptive placeholders for images using <img src="image_placeholder.jpg" alt="..."> and ensure each image has a relevant
     Return only the HTML code to be inserted between <body> and </body>, without including <html>, <head>, or <body> tags.
     Article content: ${articleText}`


     try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4",
            messages: [
                { role: "system", content: systemPrompt},
                { role: "user", content: userPrompt},
            ],
        });

        return completion.choices[0].message.content;
    } catch (error) {
        console.error(`Błąd podczas generowania HTML: ${error}`);
        throw error;
    }
}



/**
 * Reads the content of a file asynchronously.
 * This function loads text content from a specified file path, which can be used
 * later for HTML conversion.
 * 
 * @param {string} filePath - The path of the file to read.
 * @returns {Promise<string>} - The content of the file as a string.
 * @throws Will throw an error if the file reading operation fails.
 */
async function loadArticleContent(filePath) {
    try {
        const data = await fs.promises.readFile(filePath, "utf8");
        return data;
    } catch (err) {
        console.error("Error reading file:", err);
        throw err;
    }
}


/**
 * Saves the provided HTML content to a file asynchronously.
 * This function takes HTML content generated by the AI and writes it to a specified
 * file, which can be used as output for further processing or display.
 * 
 * @param {string} content - The HTML content to save.
 * @param {string} filePath - The path of the file where the content should be saved.
 * @returns {Promise<void>} - Completes successfully if the file is written, or throws an error.
 * @throws Will throw an error if the file writing operation fails.
 */
async function saveHtmlToFile(content, filePath) {
    try {
        await fs.promises.writeFile(filePath, content);
    } catch (err) {
        console.error("Error saving file:", err);
        throw err;
    }
}


/**
 * Processes an article by loading the content from a specified file, converting
 * it into HTML using OpenAI, and then saving the generated HTML to an output file.
 * This function combines all the necessary steps into one coordinated process.
 * 
 * @param {string} articlePath - The path of the file containing the article text.
 * @param {string} htmlOutputPath - The path of the file where the HTML content should be saved.
 * @returns {Promise<void>} - Completes successfully if all steps are executed without errors.
 */
async function processArticle(articlePath, htmlOutputPath) {
    try {
        const articleContent = await loadArticleContent(articlePath);
        const htmlContent = await generateHtmlFromArticle(articleContent);
        await saveHtmlToFile(htmlContent, htmlOutputPath);
        console.log("Successfully processed and saved the article HTML.");
    } catch (error) {
        console.error("An error occurred while processing the article:", error);
    }
}


/**
 * Main function that coordinates the entire article processing workflow.
 * This function simply sets up paths for input and output files, then calls
 * the processArticle function to handle the conversion and saving steps.
 * 
 * @returns {Promise<void>} - Completes successfully if all processing is done without errors.
 */
async function main() {
    const articlePath = 'articleContent.txt';
    const htmlOutputPath = 'artykul.html';
    
    await processArticle(articlePath, htmlOutputPath);
}


main();
